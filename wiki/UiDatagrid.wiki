= ui.hygrid.js =

|| *Author* || Copyright (c) 2009 Maxime Haineault ([http://haineault.com haineault.com]) ||
|| *License* || [http://www.opensource.org/licenses/mit-license.php MIT License] ||
|| *Website* || http://haineault.com/media/jquery/ui-datagrid/page/ ||


== Basic usage ==

=== Javascript ===

{{{

$('#demo').hygrid({
    url: 'data/datagrid-test.json',
    cols: [
        {label: 'ISO',  name: 'iso',  width: 40, sortable: true, align: 'center'},
        {label: 'Name', name: 'name', width: 40, sortable: true, align: 'left', hide: true}
    ]
});

}}}


== Plugins ==

The plugin architecture is made in a even driven fashion, which make it easier to keep things clean and encapsulated. 

=== Available plugins ===

|| *Name* || *Description* ||
|| colhider || Provide a way to hide/show certain columns with a menu ||
|| sortable || Provide a way to sort certain columns (still in dev) ||
|| ledger || Apply alternate colors on rows. ||
|| pagination || Show pagination options ||
|| selectable || Allow row selection`*` ||
|| editable || Allow row level edition`*` ||
|| sortable || Sortable columns`*` ||
|| trobber || Animation while loading data`*` ||
|| search || General searching functionalities`*` ||

`*` To come

=== Basic plugin structure ===

{{{

$.ui.plugin.add('hygrid', 'pluginName', {
    eventName: function(e, ui) {
        // do stuff
    }
});

}}}

Of course e is the event object and ui the plugin instance, which makes it possible to override any of the grid property.

=== Plugins options ===

Each plugin can add its own options and defaults, simply extend `$.ui.hygrid.defaults` like this;

{{{

$.ui.hygrid.defaults.pagination = true;

// or if you have many defaults to add;

$.extend($.ui.hygrid.defaults, {
    pagination: true,
    page: 1,
    rpp: 10
});

}}}

It's also possible to change options at initialization time. For example, the pagination plugin must ensure that the bottom toolbar is enabled in order to work properly. So if the user enable the pagination plugin it will automatically enable the toolbar, even if it's disabled.

It can be achieved like this;

{{{

$.ui.plugin.add('hygrid', 'pagination', {
    initialize: function(e, ui) {
        ui.options.toolbarBottom = true;
    }
});
}}}

== Extending cells options ==

When creating a grid, it's mandatory to specify the cells and how they behave.

The `cols` options takes an array of object and each object is a cell descriptor containing modifiers, like this;

{{{
$('#demo').datagrid({
    cols: [
        {label: 'ISO',  name: 'iso',  width: 40, sortable: true, align: 'center'}
    ]
});
}}}

Cell descriptors are extensible through the plugin architecture as well. The grid provide only basic modifiers (label, align, width and hide).

Let's see how the _label_ modifier works;

{{{

$.ui.datagrid.cellModifiers = {
    label: function(el, cell, type){
        el.find('div').text(cell.label);
    }
}

}}}

The modifiers are used solely to manipulate grid cells and, as you can see, it receive
everything it needs to work as argument; the cell element, the cell options and the cell type (td or th).

The rest is fairly self explanatory.




== Events ==

|| *Event* ||  *Description* ||
|| initialize || Triggered _before_ the grid is built. That's where you can extend or modify the grid ||
|| initialized || Triggered when the grid is built and each plugins are initialized ||
|| resized || Triggered after the grid have been resized ||
|| gridupdated || Triggered when the content of the grid has changed ||
|| coltoggled || Triggered when a column has been toggled ||
|| dataloading || Triggered before making the Ajax request ||
|| dataloaded || Triggered when the Ajax response has been recieved ||

== Options ==

=== Defaults ===

|| *Option* || *Default* || *Description* ||
|| url || false || Backend URL ||
|| method || 'get' || Method to use to pass the grid parameters to the backend ||
|| dataType || 'json' || Data type to use. It's also used to specify the data parser, which is also extendable. ||
|| onError || function || Callback function for Ajax error handling ||
|| width || 'auto' || Grid's width`*`  ||
|| ajax || false || Use Ajax ||
|| colhider || true || Activate colhider ||
|| sortable || true || Activate sortable cols ||
|| ledger || true || Activate ledger ||
|| pagination || true || Activate pagination ||
|| page || 1 || Current page (pagination) ||
|| rpp || 10 || Rows per page (pagination) ||

`*` height is determined by the number of rows displayed

== Core properties ==

|| *Property* || *Type* || * Description* ||
|| `params` || `function` || Returns the parameters passed to the backend as object ||
|| `cols` || `function` || Returns the columns count (only the visible if true is specified) ||
|| `col` || `function` || Return a column by index ||
|| `row` || `function` || Return a row by index ||
|| `cell` || `function` || Return a cell by x,y ||
|| `cells` || `function` || Return grid's cells ||
|| `_init` || `function` || Grid initialization (first method to be called) ||
problem ||
|| `_trigger` || `function` || Trigger an event ||
|| `_setGridWidth` || `function` || Apply the grid's width ||
|| `_createRow` || `function` || Creates and insert grid rows ||
|| `_createCell` || `function` || Creates and returns a grid cell (td or th) ||
|| `_applyCellModifiers` || `function` || Applies cell modifiers to a given element ||
|| `_getColOptions` || `function` || Returns col options for a given col ||
|| `_` || `function` || Used to store/retrieve UI elements ||