= ui.hygrid.js =

|| *Author* || Copyright (c) 2009 Maxime Haineault ([http://haineault.com haineault.com]) ||
|| *License* || [http://www.opensource.org/licenses/mit-license.php MIT License] ||
|| *Website* || http://haineault.com/media/jquery/ui-datagrid/page/ ||


== Basic usage ==

=== Javascript ===

{{{

$('#demo').hygrid({
    url: 'data/datagrid-test.json',
    cols: [
        {label: 'ISO',  name: 'iso',  width: 40, sortable: true, align: 'center'},
        {label: 'Name', name: 'name', width: 40, sortable: true, align: 'left', hide: true}
    ]
});

}}}


== Plugins ==

The plugin architecture is made in a even driven fashion, which make it easier to keep things clean and encapsulated. 

=== Available plugins ===

|| *Name* || *Description* ||
|| `core` || Core cell modifiers and event handling ||
|| `htmltable` || Create hygrid from static html table ||
|| `ajax` || Create hygrid from remote data ||
|| `caption` || Grid title ||
|| `colhider` || Provide a way to toggle columns ||
|| `ledger` || Apply alternate colors on rows. ||
|| `pagination` || Show pagination options ||
|| `selectable` || Allow row selection ||
|| `debug` || Output internal events ||

=== Basic plugin structure ===

{{{

$.ui.plugin.add('hygrid', 'pluginName', {
    eventName: function(e, ui) {
        // do stuff
    }
});

}}}

Of course e is the event object and ui the plugin instance, which makes it possible to override any of the grid property.

=== Plugins options ===

Each plugin can add its own options and defaults, simply extend `$.ui.hygrid.defaults` like this;

{{{

$.ui.hygrid.defaults.pagination = true;

// or if you have many defaults to add;

$.extend($.ui.hygrid.defaults, {
    pagination: true,
    page: 1,
    rpp: 10
});

}}}

It's also possible to change options at initialization time. For example, the pagination plugin must ensure that the bottom toolbar is enabled in order to work properly. So if the user enable the pagination plugin it will automatically enable the toolbar, even if it's disabled.

It can be achieved like this;

{{{

$.ui.plugin.add('hygrid', 'pagination', {
    initialize: function(e, ui) {
        ui.options.toolbarBottom = true;
    }
});
}}}

== Extending cells options ==

When creating a grid, it's mandatory to specify the cells and how they behave.

The `cols` options takes an array of object and each object is a cell descriptor containing modifiers, like this;

{{{
$('#demo').datagrid({
    cols: [
        {label: 'ISO',  name: 'iso',  width: 40, sortable: true, align: 'center'}
    ]
});
}}}

Cell descriptors are extensible through the plugin architecture as well. The grid provide only basic modifiers (label, align, width and hide).

Let's see how the _label_ modifier works;

{{{

$.ui.datagrid.cellModifiers = {

    align: function(el, cell){ 
        el.css('text-align', cell.align); 
    },

    format:  function(el, cell, type){ 
        if (type == 'td') {
            el.text($.format(cell.format, el.text())); 
        }
    }

}

}}}

The modifiers are used solely to manipulate grid cells and grid headers. As you can see, it receive
everything it needs to work as argument; the cell element, the cell options and the cell type (td or th).

The rest is fairly straight forward.

== Events ==

|| *Event* ||  *Description* ||
|| `initialize` || Triggered _before_ the plugin are initialized. That's also where you can extend or modify the grid ||
|| `initialized` || The grid is built and each plugins are initialized ||
|| `resized` || The grid has been resized ||
|| `gridupdated` || The content of the grid has changed ||
|| `coltoggled` || A column has been toggled (toggled column is accessible via ui.toggledCol) ||
|| `dataloading` || A ajax request has been made ||
|| `dataloaded` || A ajax response has been loaded (recieved data is accessible via ui.recievedData) ||
|| `rowinsert` || A row will be inserted ||
|| `rowinserted` || A row has been inserted (inserted row is accessible via ui.insertedRow) ||

== Options ==

=== Defaults ===

|| *Option* || *Default* || *Description* ||
|| `width` || `'auto'` || Grid's width`*`  ||
|| `debug` || `false` || Output internal events ||
|| `core` || `true` || Load core plugin ||
|| `toolbar` || `true` || Show toolbar ||
|| `caption` || `false` || Display specified caption ||
|| `ajax` || `false` || Use Ajax ||
|| `url` || `false` || Backend URL ||
|| `method` || `'get'` || Method to use to pass the grid parameters to the backend ||
|| `dataType` || `'json'` || Data type to use. It's also used to specify the data parser, which is also extendable. ||
|| `onError` || `function` || Callback function for Ajax error handling ||
|| `colhider` || `true` || Activate colhider ||
|| `sortable` || `true` || Activate sortable cols ||
|| `ledger` || `true` || Activate ledger ||
|| `pagination` || `true` || Activate pagination ||
|| `page` || `1` || Current page (pagination) ||
|| `rpp` || `10` || Rows per page (pagination) ||
|| `total` || `0` || Row count ||
|| `rppSelect` || `[5, 10, 15, 20]` || Show row per page selec box ||
|| `pager` || `'{start:d}-{end:d}/{total:d}, page: {page:d} of {pagetotal:d}'` || Pager string (set to false to disable pager) ||
|| `params` || `[]` || Which options must be passed as request parameter ||


`*` height is determined by the number of rows displayed

== Core methods ==

|| *Property* || *Arguments* || * Description* ||
|| `params` || ` ` || Returns the parameters passed to the backend as object ||
|| `cols` || `(bool) visible` || Returns the columns count (only the visible if true is specified) ||
|| `col` || `(int) index, (bool) excludeHeaders` || Return a column by index ||
|| `row` || `(int) index OR (array) row` || Return a row by index or create a row ||
|| `cell` || `(int) x, (int) y, (bool) visible` || Return a cell by x, y position in the grid, if visible is true hidden cells will be ignored ||
|| `cells` || `(bool) visibleOnly` || Return grid's cells ||
|| `_init` || ` ` || Grid initialization (first method to be called) ||
problem ||
|| `_trigger` || `(string) type, (object) event, (object) ui` || Trigger an event ||
|| `_setGridWidth` || ` ` || Apply the grid's width ||
|| `_createRow` || `(array) cells` || Creates and insert grid rows ||
|| `_createCell` || `(object) cell, (string) type` || Creates and returns a grid cell (td or th) ||
|| `_applyCellModifiers` || `(object) el, (object) cell, (int) col` || Applies cell modifiers to a given element ||
|| `_setColOptions` || `(int) index, (string) option, value` || Sets col options for a given col ||
|| `_getColOptions` || `(int) index, (string) option` || Returns col options for a given col ||
|| `_` || `(string) key, value` || Used to store/retrieve UI elements ||